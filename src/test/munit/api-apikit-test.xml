<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:api.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost.mspairport.com" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="delete:/users/userId:api-config-200-application/json-FlowTest" description="Verifying functionality of [delete:/users/userId:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Database']"/>
            </mock:with-attributes>
            <mock:then-return payload="{ &quot;message&quot;: &quot;The user was DELETED successfuly&quot; }"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/useradmin/users/1" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/delete_200_users_{userid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/users/userId:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/users/userId:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Database']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Arrays.asList(['userid' : Integer.parseInt(&quot;1&quot;), 'firstname' : 'John', 'lastname': 'Smith', 'middlename': 'A', 'department': 'IT', 'hiredate':  '2015-10-01T00:00:00', 'statusdate': '2015-12-01T00:00:00', 'jobtitle': 'Developer'])]"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/useradmin/users/1" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_users_{userid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/users:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/users:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Database']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[Arrays.asList(['userid' : Integer.parseInt(&quot;1&quot;), 'firstname' : 'John', 'lastname': 'Smith', 'middlename': 'A', 'department': 'IT', 'hiredate':  '2015-10-01T00:00:00', 'statusdate': '2015-12-01T00:00:00', 'jobtitle': 'Developer'],['userid' : Integer.parseInt(&quot;2&quot;), 'firstname' : 'David', 'lastname': 'Jones', 'middlename': 'C', 'department': 'HR', 'hiredate':  '2015-10-01T00:00:00', 'statusdate': '2015-12-01T00:00:00', 'jobtitle': 'HR Analyst'])]"/>
        </mock:when>

        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/useradmin/users" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_users_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>

    <munit:test name="post:/users:application/xml:api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/users:application/xml:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Database']"/>
            </mock:with-attributes>
            <mock:then-return payload="{ &quot;message&quot;: &quot;The user was CREATED successfuly&quot; }"/>
        </mock:when>
        <set-payload value="#[getResource('scaffolder/request/post_users_application_xml.txt').asString()]" doc:name="Set Payload"/>

        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/useradmin/users" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/xml"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/post_200_users_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>
